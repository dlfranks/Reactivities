{"version":3,"sources":["app/models/profile.ts","app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/profileStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/form/MyDateInput.tsx","app/common/options/categoryOptions.ts","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/AtivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["Profile","user","this","username","displayName","image","PaginatedResult","data","pagination","PagingParams","pageNumber","pageSize","sleep","delay","Promise","resolve","setTimeout","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","Node_ENV","JSON","parse","error","status","console","log","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","register","Profiles","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","setLoadingInitial","axiosParams","result","setActivity","setPagination","state","selectActivity","createActivity","userStore","attendee","newActivity","hostUsername","attendees","runInAction","updateActivity","updatedActivity","getActivity","cancelActivityToggle","isCancelled","loadActivity","isGoing","some","isHost","host","find","x","Date","deleteActivity","updateAttendance","filter","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","setImage","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","eventTab","loadingActivities","setEventTab","setActiveTab","loadProfile","photo","photos","isMain","p","bio","setProfile","activityStore","followingCount","loadFollowings","loadUserActivities","getItem","appLoaded","setItem","setAppLoaded","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","header","exact","as","NavLink","to","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","Reveal","animated","Content","visible","width","fluid","color","hidden","basic","e","preventDefault","handleFollow","Card","Header","Description","whiteSpace","overflow","textOverflow","extra","Icon","styles","borderColor","borderWidth","borderStyle","List","horizontal","map","Popup","hoverable","trigger","size","circular","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","secondary","clearing","floated","groupActivities","group","sub","vertical","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","MyDateInput","selected","CategoryOptions","useParams","useHistory","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","Statistic","Divider","isCurrentUser","setEditMode","handleChange","target","Tab","Pane","Input","TextArea","wordWrap","itemsPerRow","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","objectFit","Meta","menuPosition","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.c76e8d3f.chunk.js","sourcesContent":["import { User } from './user';\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity{\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n    \r\n}","export interface Pagination {\r\n    currentPage: number;\r\n    itemPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T>{\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../../index';\r\nimport { store } from '../stores/store';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { PaginatedResult } from '../models/pagination';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n\r\n    })\r\n    \r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if(process.env.Node_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status,config } = error.response!;\r\n    console.log(error.response);\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } else {\r\n                toast.error(data);\r\n            }\r\n            \r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\n\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put:<T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n};\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params })\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities/', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Profile) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`) \r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;\r\n","import { Profile } from './profile';\r\n\r\n\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled?: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: Activity) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n}","import { Profile } from './../models/profile';\r\nimport { makeAutoObservable, reaction, runInAction} from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { format } from 'date-fns';\r\nimport { store } from './store';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { Pagination, PagingParams } from '../models/pagination';\r\n\r\nexport default class ActivityStore {\r\n    //activities: Activity[] = [];\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n    \r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(), \r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n    \r\n    get groupActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string] : Activity[]})\r\n        )    \r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.setLoadingInitial(true);\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                //activity.date = activity.date.split('T')[0];\r\n                //this.activities.push(activity);\r\n                //this.activityRegistry.set(activity.id, activity);\r\n                this.setActivity(activity);\r\n            });\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error)\r\n        {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    setLoadingInitial = (state:boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    selectActivity = (id: string) => {\r\n        //this.selectedActivity = this.activities.find(a => a.id === id);\r\n        this.selectedActivity = this.activityRegistry.get(id);\r\n    }\r\n\r\n    // cancelSelectedActivity = () => {\r\n    //     this.selectedActivity = undefined;\r\n    // }\r\n\r\n    // openForm = (id?: string) => {\r\n    //     id ? this.selectActivity(id) : this.cancelSelectedActivity();\r\n    //     this.editMode = true;\r\n    // }\r\n\r\n    // closeForm = () => {\r\n    //     this.editMode = false;\r\n    // }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        \r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        \r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                \r\n                this.selectedActivity = newActivity;\r\n                \r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            \r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        \r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity };\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            \r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }finally{\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n \r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n\r\n            try {\r\n                \r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                \r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n    \r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    \r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = false;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n\r\n                //this.activities = [...this.activities.filter(a => a.id !== id)];\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            \r\n            runInAction(() => {\r\n                console.log(error);\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees =\r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n}\r\n\r\n","import { User, UserFormValues } from '../models/user';\r\nimport { makeAutoObservable, runInAction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { store } from './store';\r\nimport { history } from '../..';\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n    \r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    \r\n    register = async(creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if(this.user) this.user.image = image;\r\n    }\r\n}","import { Photo, Profile, UserActivity } from './../models/profile';\r\nimport { makeAutoObservable, runInAction, reaction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { store } from './store';\r\n\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings: boolean = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    eventTab = 0;\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n                if (activeTab === 2) {\r\n                    this.setEventTab(0);\r\n                    this.loadUserActivities('future');\r\n                }\r\n            }\r\n        )\r\n        \r\n        \r\n    }\r\n\r\n    setEventTab = (eventTab: any) => {\r\n        this.eventTab = eventTab;\r\n        \r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n                await agent.Profiles.deletePhoto(photo.id);\r\n                runInAction(() => {\r\n                    if (this.profile) {\r\n                        this.profile.photos = this.profile.photos?.filter(a => a.id !== photo.id);\r\n                        this.loading = false;\r\n                    }\r\n                    \r\n                })\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.profile)\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Profile) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.displayName = profile.displayName;\r\n                    this.profile.bio = profile.bio;\r\n                }\r\n                this.loading = false;\r\n                \r\n            })\r\n            \r\n        } catch (error) {\r\n            runInAction(() => this.profile);\r\n            this.loading = false;\r\n        }\r\n    }\r\n\r\n    setProfile = (profile: Profile) => {\r\n        this.profile = { ...this.profile, ...profile };\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username !== username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followingCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const userActivities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = userActivities;\r\n                this.loadingActivities = false;\r\n            })\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => { this.loadingActivities = false });\r\n        }\r\n    }\r\n}","import { createContext, useContext } from 'react';\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommonStore from './commonStore';\r\nimport UserStore from './userStore';\r\nimport ModalStore from './modalStore';\r\nimport ProfileStore from './profileStore';\r\nimport CommentStore from './commentStore';\r\n\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from 'mobx';\r\nimport { ServerError } from '../models/serverError';\r\n\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        if (token) window.localStorage.setItem('jwt', token);\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from 'mobx';\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null\r\n}\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction} from 'mobx';\r\nimport { ChatComment } from \"../models/comments\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n            \r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection'));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connetion: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values:any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Container, Menu, Button, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore : {user, logout}} = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item header exact as={NavLink} to='/'>\r\n                    <img src=\"/assets/logo.png\" alt='logo' style={{marginRight: '10px'}}/>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors'/>\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={`${user?.displayName}`}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent} from 'react';\r\nimport { Button, Reveal } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\n\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const { profileStore, userStore } = useStore();\r\n    const { updateFollowing, loading } = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n    \r\n    return (\r\n        \r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }} >\r\n                <Button\r\n                    fluid\r\n                    color='teal'\r\n                    content={profile.following ? 'Following': 'Not following'}\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }} >\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { Profile } from '../../app/models/profile';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport FollowButton from './FollowButton';\r\n\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description\r\n                    style={{\r\n                        whiteSpace: 'nowrap',\r\n                        overflow: 'hidden',\r\n                        textOverflow:'ellipsis'\r\n                    }}>{profile.bio}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport { Link } from 'react-router-dom';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3,\r\n        borderStyle: 'solid'\r\n    }\r\n    return (\r\n        <List horizontal>\r\n            {\r\n                attendees.map(attendee => (\r\n                    <Popup\r\n                        hoverable\r\n                        key={attendee.username}\r\n                        trigger={\r\n                            <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}> \r\n                                <Image\r\n                                    size='mini'\r\n                                    circular src={attendee.image || '/assets/user.png'}\r\n                                    style={attendee.following ? styles : null}\r\n                                />\r\n                            </List.Item>  \r\n                        }\r\n                    >\r\n                        <Popup.Content>\r\n                            <ProfileCard profile={attendee} />\r\n                        </Popup.Content>\r\n                        \r\n                    </Popup>\r\n                ))\r\n            }\r\n            \r\n            \r\n        </List>\r\n    );\r\n\r\n})","import { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport { format } from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee'\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({activity}: Props) {\r\n    \r\n   \r\n    // function handleDeleteActivity(e: SyntheticEvent<HTMLButtonElement>, id: string) {\r\n    //     setTarget(e.currentTarget.name);\r\n    //     deleteActivity(id);\r\n    // }\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 5}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Holded by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link>\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyy h:mm aa')}  \r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!}/>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Header} from 'semantic-ui-react';\r\nimport ActivityListItem from './ActivityListItem';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { Fragment } from 'react';\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const {groupActivities} = activityStore;\r\n    \r\n    return (\r\n        <>\r\n            {groupActivities.map(([group, activities]) => {\r\n                return (<Fragment key={group}>\r\n                    <Header sub color='teal' >\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity =>\r\n                        <ActivityListItem key={activity.id } activity={ activity}/>\r\n                    )}\r\n                </Fragment>)\r\n\r\n            })}\r\n        </>\r\n        \r\n    )\r\n})\r\n","import React from 'react';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport Calendar from 'react-calendar';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const { activityStore: { predicate, setPredicate } } = useStore();\r\n    \r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop:28 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item\r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar\r\n                onChange={(date : Date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Grid, Loader} from 'semantic-ui-react';\r\nimport ActivityList from './ActivityList';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport ActivityFilter from '../../activities/dashboard/ActivityFilters';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n  \r\n    useEffect(() => {\r\n        if(activityRegistry.size === 0) loadActivities();\r\n        \r\n    }, [activityRegistry.size, loadActivities]);\r\n\r\n    // if (activityStore.loadingInitial && !loadingNext) return (<LoadingComponent content=\"Loading activities...\" />);\r\n\r\n    return (\r\n        \r\n            <Grid>\r\n            <Grid.Column width='10'>\r\n                {\r\n                    activityStore.loadingInitial && !loadingNext ? (\r\n                        <>\r\n                            <ActivityListItemPlaceholder />\r\n                            <ActivityListItemPlaceholder />\r\n                        </>\r\n                    ) : (\r\n                        <InfiniteScroll width={10}\r\n                            pageStart={0}\r\n                            loadMore={handleGetNext}\r\n                            hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                            initialLoad={false}\r\n                        >\r\n                            <ActivityList />\r\n                        </InfiniteScroll>\r\n                    )\r\n                }\r\n                \r\n                \r\n                {/* <Button \r\n                    floated='right'\r\n                    content='More...'\r\n                    positive\r\n                    onClick={handleGetNext}\r\n                    loading={loadingNext}\r\n                    disabled={pagination?.totalPages === pagination?.currentPage}\r\n                /> */}\r\n                </Grid.Column>\r\n                <Grid.Column width='6'>\r\n                    <ActivityFilter/>\r\n                </Grid.Column>\r\n                <Grid.Column width={10}>\r\n                    <Loader active={loadingNext} />\r\n                \r\n                </Grid.Column>\r\n            </Grid>\r\n        \r\n        \r\n    );\r\n\r\n})","import React from 'react';\r\nimport { useField } from 'formik';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{ meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Form, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\n\r\nexport default observer(function LoginForm() {\r\n\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.login(values).catch(error =>\r\n                setErrors({error: 'Invalid email or password'}))}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                            <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />}\r\n                    />\r\n                    <Button loading={ isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n\r\n            )}\r\n            </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    //errors: string[] | null;\r\n    errors:any\r\n}\r\n\r\nexport default function ValidationErrors({ errors }: Props) {\r\n    return (\r\n        <Message error>\r\n            {\r\n                errors && (\r\n                    <Message.List>\r\n                        {errors.map((err: any, i:any) => (\r\n                            <Message.Item key={i}>{ err}</Message.Item>\r\n                        ))}\r\n                    </Message.List>\r\n                )\r\n            }\r\n        </Message>\r\n    );\r\n}","import { ErrorMessage, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Form, Header} from 'semantic-ui-react';\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\n\r\nexport default observer(function RegisterForm() {\r\n\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.register(values).catch(error =>\r\n                setErrors({ error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required()\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='User Name' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                            <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={ isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n\r\n            )}\r\n            </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Image, Segment, Header, Button} from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container style={{ marginTop: '7em' }}>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n                {\r\n                    userStore.isLoggedIn ? (\r\n                        <>\r\n                            <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                            <Button as={Link} to='/activities' size='huge' inverted>\r\n                                Go to Activities!\r\n                            </Button>\r\n                        </>\r\n                    ) : (\r\n                            <>\r\n                                <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted >\r\n                                        Login!\r\n                                </Button>\r\n                                <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted >\r\n                                    Register!\r\n                                </Button>\r\n                            </>\r\n                            \r\n                    )\r\n                }\r\n                \r\n        </Container>\r\n        </Segment>\r\n        \r\n    )\r\n})\r\n\r\n\r\n","import { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({ inverted = true, content = 'Loading...' }: Props)\r\n{\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    );\r\n}","import React from 'react';\r\nimport { useField } from 'formik';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{ meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import React from 'react';\r\nimport { useField } from 'formik';\r\nimport { Form, Select, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{ meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import React from 'react';\r\nimport { useField } from 'formik';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{ meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const CategoryOptions = [\r\n    { text: 'Drink', value: 'drinks' },\r\n    { text: 'Culture', value: 'culture' },\r\n    { text: 'Film', value: 'film' },\r\n    { text: 'Food', value: 'food' },\r\n    { text: 'Music', value: 'music' },\r\n    {text: 'Travel', value: 'travel'},\r\n    \r\n]","import { observer } from 'mobx-react-lite';\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Segment, Button, Header } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport {CategoryOptions} from '../../../app/common/options/categoryOptions';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\n\r\nexport default observer(function ActivityForm() {\r\n    \r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n    const history = useHistory();\r\n\r\n    \r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('the activity title is required'),\r\n        description: Yup.string().required('the activity title is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is requird').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n        \r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity:ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => {\r\n                \r\n                history.push(`/activities/${newActivity.id}`)\r\n            });\r\n            \r\n        } else {\r\n            updateActivity(activity).then(() => {\r\n                history.push(`/activities/${activity.id}`)\r\n            })\r\n        }\r\n    }\r\n\r\n    // function handleChange(event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n    //     const { name, value } = event.target;\r\n    //     setActivity({...activity, [name]: value})\r\n\r\n    // }\r\n\r\n    if (loadingInitial) return (<LoadingComponent content=\"Loading activity...\" />);\r\n    \r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({handleSubmit, isValid, isSubmitting, dirty}) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput placeholder='Title' name='title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={ CategoryOptions} placeholder='Category' name='category'/>\r\n                        <MyDateInput\r\n                            placeholderText='Date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated='right' positive type='submit' content='Submit' />\r\n                        <Button as={ Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n\r\n            </Formik>\r\n            \r\n        </Segment>\r\n    )\r\n})\r\n","import { Formik, Form, Field, FieldProps } from 'formik';\r\nimport { observer } from 'mobx-react-lite'\r\nimport  React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow';\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n            <Formik\r\n                    onSubmit={(values, { resetForm }) =>{\r\n                        return commentStore.addComment(values).then(() => resetForm());\r\n                    }}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {\r\n                        ({isSubmitting, isValid, handleSubmit}) => (\r\n                            <Form className='ui form'>\r\n                                <Field name='body'>\r\n                                    {\r\n                                        (props: FieldProps) => (\r\n                                            <div style={{ position: 'relative' }}>\r\n                                                <Loader active={isSubmitting} />\r\n\r\n                                                <textarea\r\n                                                    placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                                    rows={2}\r\n                                                    {...props.field}\r\n                                                    onKeyPress={e => {\r\n                                                        if (e.key === 'enter' && e.shiftKey) {\r\n                                                            return;\r\n                                                        }\r\n                                                        if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                            e.preventDefault();\r\n                                                            isValid && handleSubmit();\r\n                                                        }\r\n                                                    }}\r\n                                                />\r\n\r\n                                            </div>\r\n\r\n                                        )\r\n                                    }\r\n                                    \r\n                                </Field>\r\n                            </Form>\r\n                        )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {\r\n                        commentStore.comments.map((comment) => (\r\n                            <Comment key={comment.id}>\r\n                                <Comment.Avatar src={comment.image || '/assets/user.png'}/>\r\n                                <Comment.Content>\r\n                                    <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                                    <Comment.Metadata>\r\n                                        <div>{formatDistanceToNow(comment.createdAt)}</div>\r\n                                    </Comment.Metadata>\r\n                                    <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body }</Comment.Text>\r\n                                </Comment.Content>\r\n                            </Comment>\r\n                        ))\r\n                    }\r\n                </Comment.Group>\r\n                \r\n            \r\n            </Segment>\r\n            \r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore : {updateAttendance, loading, cancelActivityToggle}} = useStore();\r\n    \r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {\r\n                    activity.isCancelled && \r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>\r\n                                                        {activity.host?.displayName}\r\n                                                    </Link>\r\n                                                </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {\r\n                    activity.isHost ? (\r\n                        <>\r\n                            <Button\r\n                                color={activity.isCancelled ? 'green' : 'red'}\r\n                                floated='left'\r\n                                basic\r\n                                content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                                onClick={cancelActivityToggle}\r\n                                loading={loading}>\r\n                                \r\n                            </Button>\r\n\r\n                            <Button as={Link}\r\n                                disabled={activity.isCancelled}\r\n                                to={`/manage/${activity.id}`}\r\n                                color='orange'\r\n                                floated='right' >\r\n                                Manage Event\r\n                            </Button>\r\n                        </>\r\n                        \r\n                    ) : activity.isGoing ? (\r\n                            <Button loading={loading } onClick={updateAttendance}>Cancle attendance</Button>\r\n                        ) : (\r\n                                <Button disabled={activity.isCancelled}\r\n                                    loading={loading}\r\n                                    onClick={updateAttendance}\r\n                                    color='teal'>\r\n                                    Join Activity\r\n                                </Button>\r\n                    )\r\n                }\r\n                \r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\n\r\ninterface Props{\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person': 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {\r\n                        attendees.map(attendee => (\r\n                            <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                                {attendee.username === host?.username &&\r\n                                    <Label\r\n                                        style={{ position: 'absolute' }}\r\n                                        color='orange'\r\n                                        ribbon='right'\r\n                                    >\r\n                                        Host\r\n                                    </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                        <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                    </Item.Header>\r\n                                    {\r\n                                        attendee.following &&\r\n                                        <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                                    }\r\n                                \r\n                            </Item.Content>\r\n                        </Item>\r\n                        ))\r\n                    }\r\n                \r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./AtivityDetailedSidebar\";\r\n\r\n\r\nexport default observer(function ActivityDetails() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n        \r\n    }, [id, loadActivity, clearSelectedActivity])\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={ activity}/>\r\n                <ActivityDetailedInfo activity={activity }/>\r\n                <ActivityDetailedChat activityId={activity.id}/>\r\n                \r\n            </Grid.Column>\r\n            <Grid.Column width={6} >\r\n                <ActivityDetailedSidebar activity={activity}/>\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})\r\n","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors}/>\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary >\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const { commonStore } = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {\r\n                commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{ marginTop: '10px' }}>{ commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n            \r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const { modalStore } = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { ChangeEvent,  useState } from 'react';\r\nimport { Button, Form, Grid, Header, Tab} from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props{\r\n    profile: Profile;\r\n}\r\nexport default observer(function ProfileAbout({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, updateProfile, loading, setProfile } } = useStore();\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const handleChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        const { name, value } = e.target;\r\n        setProfile({ ...profile, [name]:value });\r\n        \r\n    }\r\n\r\n    const handleFormSubmit = () => {\r\n        updateProfile(profile).then(() => {\r\n            setEditMode(false);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header icon='image' content={profile.displayName} />\r\n                    {\r\n                        isCurrentUser && (\r\n                            <Button floated='right' basic\r\n                                content={editMode ? 'Cancel' : 'Edit'}\r\n                                onClick={() => setEditMode(!editMode)}\r\n                            />\r\n                        )\r\n                    }\r\n                   \r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {\r\n                        isCurrentUser && editMode ? (\r\n                            <Form className='ui form' onSubmit={handleFormSubmit}>\r\n                                <Form.Field>\r\n                                    <label>Display Name:</label>\r\n                                    <Form.Input name='displayName' value={ profile.displayName} type='text' onChange={handleChange}/>\r\n                                </Form.Field>\r\n                                <Form.Field>\r\n                                    <label>Bio:</label>\r\n                                    <Form.TextArea rows={5} name='bio' value={profile.bio} type='text' onChange={handleChange} />\r\n                                </Form.Field>\r\n                                <Form.Field>\r\n                                    <Form.Button\r\n                                        floated='right'\r\n                                        type='submit'\r\n                                        content='Update Profile'\r\n                                        loading={loading}\r\n                                        positive\r\n                                        disabled={loading}\r\n                                    />\r\n                                </Form.Field>\r\n                                \r\n                                \r\n                                \r\n                            </Form>       \r\n                        ) : (\r\n                            <p style={{wordWrap:'break-word'}}>\r\n                                {profile.bio}\r\n                            </p>  \r\n                        )\r\n                    }\r\n                    \r\n                    \r\n\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport ProfileCard from './ProfileCard';\r\n\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const { profileStore } = useStore();\r\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\r\n\r\n    \r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                    \r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return(\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%' }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n  setFiles: (files: any) => void;\r\n}\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n  const dzStyles = {\r\n    border: 'dashed 3px #eee',\r\n    borderColor: '#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '30px',\r\n    textAlign: 'center' as 'center',\r\n    height: 200\r\n  }\r\n\r\n  const dzActive = {\r\n      borderColor: 'green'\r\n    }\r\n  \r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n      preview: URL.createObjectURL(file)\r\n    })))\r\n    console.log(acceptedFiles);\r\n  }, [setFiles])\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    \r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge' />\r\n      <Header content='Drop image here' />\r\n    </div>\r\n      \r\n  )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Button, Grid, Header} from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview}/>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 && \r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                } \r\n                \r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { Button, Card, Grid, Header, Tab, Image } from \"semantic-ui-react\";\r\nimport { Profile, Photo } from '../../app/models/profile';\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { SyntheticEvent, useState } from \"react\";\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({profile}: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header icon='image' content='Photo' />\r\n                    {\r\n                        isCurrentUser && (\r\n                            <Button floated='right' basic\r\n                                content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                                onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                            />\r\n                        )\r\n                    }\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {\r\n                        addPhotoMode ? (\r\n                            <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading } />\r\n                        ) : (\r\n                                <Card.Group itemsPerRow={5}>\r\n                                    {\r\n                                        profile.photos?.map(photo => (\r\n                                            <Card key={photo.id}>\r\n                                                <Image src={photo.url} />\r\n                                                {\r\n                                                    isCurrentUser && (\r\n                                                        <Button.Group fluid widths={2}>\r\n                                                            <Button\r\n                                                                basic\r\n                                                                color='green'\r\n                                                                content='Main'\r\n                                                                name={'main' + photo.id}\r\n                                                                disabled={photo.isMain}\r\n                                                                loading={target === 'main' + photo.id && loading}\r\n                                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                                            />\r\n                                                            <Button\r\n                                                                basic\r\n                                                                color='red'\r\n                                                                icon='trash'\r\n                                                                name={photo.id}\r\n                                                                disabled={photo.isMain}\r\n                                                                loading={target === photo.id && loading}\r\n                                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                            />\r\n\r\n                                                        </Button.Group>\r\n                                                    )\r\n                                                }\r\n                                            </Card>\r\n                                        ))\r\n                                    }\r\n                                \r\n                                </Card.Group>\r\n                        )\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'isHost' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\n\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\n\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const { profileStore } = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout profile={profile}/>},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <ProfileActivities />},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\r\n    ];\r\n\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport ProfileHeader from './ProfileHeader';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useStore } from '../../app/stores/store';\r\nimport React, { useEffect } from 'react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport ProfileContent from './ProfileContent';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile , setActiveTab} = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if(loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return(\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>\r\n                    }    \r\n                    \r\n                \r\n            \r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})\r\n","import { Redirect, Route, RouteComponentProps, RouteProps } from 'react-router-dom';\r\nimport { useStore } from '../stores/store';\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\r\n    const { userStore: { isLoggedIn } } = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, {useEffect} from 'react';\r\nimport { Container} from 'semantic-ui-react';\r\n\r\nimport NavBar from './NavBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport { observer } from 'mobx-react-lite';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport { Route, Switch, useLocation } from 'react-router-dom';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport TestErrors from '../../features/errors/TestError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport { useStore } from '../stores/store';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\n\r\nconst App = () => {\r\n  const location = useLocation();\r\n  const { commonStore, userStore } = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    } else {\r\n      commonStore.setAppLoaded();\r\n    }\r\n  }, [commonStore, userStore]);\r\n\r\n  if(!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\r\n  \r\n    return (\r\n      <>\r\n        <ToastContainer position='bottom-right' hideProgressBar />\r\n        <ModalContainer />\r\n        <Route exact path='/' component={HomePage} />\r\n        <Route\r\n          path={'/(.+)'}\r\n          render={() => (\r\n            <>\r\n              <NavBar />\r\n              <Container style={{ marginTop: '7em' }}>\r\n                <Switch>\r\n                  <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n                  <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n                  <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n                  <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n                  <Route path='/errors' component={TestErrors} />\r\n                  <Route path='/server-error' component={ServerError} />\r\n                  <Route component={NotFound} />\r\n                </Switch>\r\n                \r\n              </Container>\r\n            </>\r\n          )}\r\n        />\r\n        \r\n        \r\n      </>\r\n    );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './app/layout/style.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport { Router } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\n\r\n\r\n\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <StoreContext.Provider value={store}>\r\n    <Router history={history}>\r\n      <ScrollToTop />\r\n      <App />\r\n    </Router>\r\n  </StoreContext.Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n"],"sourceRoot":""}